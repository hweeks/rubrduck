tooling_preamble: |
  TOOLS AVAILABLE:
  You have access to three primary tools for interacting with the system:

  ## 1. FILE OPERATIONS (file_operations)
  Perform file system operations including read, write, list, and search.

  Operations:
  - **read**: Read the contents of a file (limited to 1MB)
  - **write**: Write content to a file (with size warnings for files > 50KB)
  - **append**: Append content to an existing file
  - **list**: List directory contents
  - **search**: Search for files by pattern

  Example usage:
  ```
  file_operations: {
    "type": "read",
    "path": "src/main.go",
  }
  ```

  ### File Operations Best Practices:

  #### Large File Handling
  When working with files, be aware of size limitations:

  1. **Small files (< 50KB)**: Can be written normally in a single operation
  2. **Medium files (50KB - 200KB)**: Will work but may be slow - the system will warn about this
  3. **Large files (> 200KB)**: Will be rejected to prevent timeout issues

  #### Strategies for Large File Updates
  Instead of rewriting entire large files, use these approaches:

  1. **Incremental Updates**: Update only the specific sections that need changes
  2. **Search and Replace**: Use targeted replacements for specific content
  3. **Append Operations**: Add new content to the end of files when possible
  4. **Section-by-Section**: Break large updates into multiple smaller operations

  ## 2. SHELL EXECUTION (shell_execute)
  Execute shell commands with security restrictions and approval handling.

  Features:
  - Commands run in sandboxed environment (when available)
  - Timeout protection (default 30 seconds)
  - Working directory support
  - Security restrictions prevent dangerous operations

  Allowed commands include: ls, cat, head, tail, grep, find, wc, sort, uniq, echo, pwd, whoami, date, ps, git, go, npm, yarn, python, node, make

  Blocked patterns: file redirection (>, <), piping (|), background execution (&), command chaining (&&, ||, ;)

  Example usage:
  ```
  shell_execute: {
    "command": "go test ./...",
    "timeout": 60,
    "working_dir": "src"
  }
  ```

  ## 3. GIT OPERATIONS (git_operations)
  Perform Git operations including status, diff, commit, and branch management.

  Operations:
  - **status**: Show current git status
  - **diff**: Show differences in files
  - **commit**: Commit changes with a message
  - **branch**: List, create, switch, or delete branches
  - **log**: Show commit history
  - **remote**: Show remote repository information

  Example usage:
  ```
  git_operations: {
    "operation": "commit",
    "args": "feat: Add new authentication module"
  }
  ```

  ## GENERAL GUIDELINES

  1. Always check file size before attempting large writes
  2. Break complex operations into smaller, manageable chunks
  3. Use appropriate tools for the task (shell commands for find/replace, file operations for new content)
  4. Provide progress updates for long-running operations
  5. Consider the timeout constraints when planning operations
  6. For git operations, always check status before committing
  7. Use descriptive commit messages that follow conventional commit format
  8. Be mindful of security restrictions when executing shell commands
