# RubrDuck Configuration Example
# Copy this file to ~/.rubrduck/config.yaml and customize as needed

# Default AI provider to use
provider: openai

# Default model for the selected provider
model: gpt-4

# AI Provider Configurations
providers:
  openai:
    name: OpenAI
    base_url: https://api.openai.com/v1
    # API key can be set here or via OPENAI_API_KEY environment variable
    # api_key: your-api-key-here
    env_key: OPENAI_API_KEY

  azure:
    name: Azure OpenAI
    base_url: https://your-resource.openai.azure.com
    api_version: 2024-02-15-preview
    env_key: AZURE_API_KEY

  anthropic:
    name: Anthropic
    base_url: https://api.anthropic.com/v1
    env_key: ANTHROPIC_API_KEY

  gemini:
    name: Google Gemini
    base_url: https://generativelanguage.googleapis.com/v1beta
    env_key: GEMINI_API_KEY

  ollama:
    name: Ollama (Local)
    base_url: http://localhost:11434/v1
    # Ollama doesn't require an API key for local usage
    api_key: ""

# Agent Configuration
agent:
  # Approval mode: suggest, auto-edit, or full-auto
  approval_mode: suggest

  # Enable sandboxing for code execution
  sandbox_enabled: true

  # Maximum retries for failed operations
  max_retries: 3

  # General timeout for operations (in seconds)
  # This is used as the default timeout for all operations
  # Can be overridden by mode-specific timeouts in the TUI section
  timeout: 300

  # Working directory (defaults to current directory)
  # working_dir: .

# API Server Configuration (for IDE extensions)
api:
  # Enable the API server
  enabled: false

  # Server port
  port: 8080

  # Server host
  host: localhost

  # Authentication token (can be set via RUBRDUCK_AUTH_TOKEN env var)
  # auth_token: your-secret-token

# Conversation History Configuration
history:
  # Maximum number of history entries to keep
  max_size: 1000

  # Enable conversation history
  save_history: true

  # Patterns to filter from history (regex)
  sensitive_patterns:
    - "password.*=.*"
    - "api[_-]?key.*=.*"
    - "token.*=.*"

# TUI (Terminal UI) Configuration
tui:
  # Color theme: default, dark, light, or custom
  theme: default

  # Enable mouse support
  mouse_enabled: true

  # Show line numbers in code blocks
  show_line_numbers: true

  # Syntax highlighting style
  syntax_theme: monokai

  # Initial mode when starting the TUI (planning, building, debugging, enhance)
  # Leave empty to show mode selection
  start_mode: ""

  # Timeouts for different modes (in seconds)
  # These control how long operations can run before timing out
  planning_timeout: 300 # 5 minutes - planning often involves large file writes
  building_timeout: 180 # 3 minutes - building may involve code generation
  debug_timeout: 120 # 2 minutes - debugging is usually faster
  enhance_timeout: 120 # 2 minutes - enhancements are typically smaller

# Sandbox Policy Configuration
sandbox:
  # Paths that tools can read from
  allow_read_paths:
    - "./"
    - "~/.rubrduck"

  # Paths that tools can write to
  allow_write_paths:
    - "./"

  # Paths that are completely blocked
  block_paths:
    - "/etc"
    - "/var"
    - "/usr"
    - "/bin"
    - "/sbin"
    - "/System"

  # Allow network access
  allow_network: false

  # Allowed network hosts (if network is enabled)
  allowed_hosts: []

  # Resource limits
  max_processes: 10
  max_memory_mb: 512
  max_cpu_time: 30 # seconds

  # Commands that are allowed to run
  allowed_commands:
    - ls
    - cat
    - head
    - tail
    - grep
    - find
    - wc
    - sort
    - uniq
    - echo
    - pwd
    - whoami
    - date
    - ps
    - git
    - go
    - npm
    - yarn
    - python
    - node
    - make

  # Commands that are explicitly blocked
  blocked_commands:
    - rm
    - rmdir
    - del
    - format
    - mkfs
    - dd
    - shred
    - sudo
    - su
    - chmod
    - chown
    - passwd
    - useradd
    - wget
    - curl
    - nc
    - netcat
    - ssh
    - scp
    - rsync

  # Environment variables that can be accessed
  allowed_env_vars:
    - PATH
    - HOME
    - USER
    - PWD
    - LANG
    - LC_ALL

  # Environment variables that are blocked
  blocked_env_vars:
    - SUDO_ASKPASS
    - SSH_AUTH_SOCK
    - GPG_AGENT_INFO

# Logging Configuration
logging:
  # Log level: debug, info, warn, error
  level: info

  # Log file path (empty for stderr only)
  file: ~/.rubrduck/rubrduck.log

  # Max log file size in MB
  max_size: 10

  # Max number of old log files to keep
  max_backups: 3

# Prompts Configuration
prompts:
  # Directory containing custom prompt templates (YAML files)
  # Templates in this directory will override default prompts
  # Leave empty to use only default prompts
  custom_dir: ~/.rubrduck/prompts

  # Example custom prompt structure:
  # Create a file like ~/.rubrduck/prompts/planning.yaml:
  # ---
  # name: "Custom Planning Mode"
  # description: "My custom planning prompt"
  # system_prompt: |
  #   You are RubrDuck, customized for my specific needs...
  #   [Your custom prompt here]
  # variables:
  #   project_name: "MyProject"
  #   language: "Go"

# Tools Configuration
tools:
  # Enable specific tools
  enabled:
    - file_read
    - file_write
    - shell_execute
    - web_search
    - git_operations

  # Tool-specific settings
  shell:
    # Allowed commands (regex patterns)
    allowed_commands:
      - "^ls.*"
      - "^cat.*"
      - "^grep.*"
      - "^find.*"
      - "^git.*"

    # Blocked commands (takes precedence over allowed)
    blocked_commands:
      - "^rm -rf.*"
      - "^sudo.*"
      - "^curl.*--output.*"

# Project-specific settings
project:
  # Paths to ignore during operations
  ignore_paths:
    - node_modules
    - .git
    - vendor
    - dist
    - build
    - "*.log"
    - "*.tmp"

  # File extensions to consider as code
  code_extensions:
    - .go
    - .js
    - .ts
    - .py
    - .java
    - .cpp
    - .c
    - .h
    - .rs
    - .rb
    - .php

# Custom instructions file
# This file contains additional instructions for the AI agent
instructions_file: ~/.rubrduck/AGENTS.md
